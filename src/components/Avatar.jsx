/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 public/models/avatar.glb -o src/components/Avatar.jsx -r public 
*/

import React, { useEffect, useMemo, useRef, useState } from 'react'
import { useFBX, useGLTF, useAnimations } from '@react-three/drei'
import { useControls } from 'leva'
import { useFrame, useLoader } from '@react-three/fiber'

import * as THREE from 'three'

// Create a dictionary to map the viseme to the corresponding morph target
const corresponding = {
  A: "viseme_PP",
  B: "viseme_KK",
  C: "viseme_I",
  D: "viseme_AA",
  E: "viseme_O",
  F: "viseme_U",
  G: "viseme_FF",
  H: "viseme_TH",
  X: "viseme_PP",
}

export function Avatar(props) {

  // Add controls panel
  const { playAudio, script } = useControls({
    playAudio: false,
    script: "bonjour",
    options: ["bonjour", "youpi"]
  })

  // load audio
  const audio = useMemo(() => new Audio(`/audios/${script}.mp3`), [script])

  // play audio
  useEffect(() => {
    if (playAudio) {
      audio.play()
      if (script === "bonjour") {
        setAnimation("Waving")
      } else {
        setAnimation("Transition")
      }
    } else {
      setAnimation("Idle")
      audio.pause()
    }
  }, [playAudio, script])

  // load gltf model
  const { nodes, materials } = useGLTF('/models/avatar.glb')

  // load animations
  const { animations: idleAnimation } = useFBX('/animations/Idle.fbx')
  const { animations: transitionAnimation } = useFBX('/animations/Transition.fbx')
  const { animations: wavingAnimation } = useFBX('/animations/Waving.fbx')

  // set animation names
  idleAnimation[0].name = 'Idle'
  transitionAnimation[0].name = 'Transition'
  wavingAnimation[0].name = 'Waving'

  // set animation references
  const [animation, setAnimation] = useState("Idle")

  // set the reference to the group
  const group = useRef()

  // useAnimations hook
  const { actions } = useAnimations(
    [idleAnimation[0], transitionAnimation[0], wavingAnimation[0]],
    group
  )
  const jsonFile = useLoader(THREE.FileLoader, `/audios/${script}.json`)
  const lipSync = JSON.parse(jsonFile)

  // lip sync
  useFrame(() => {
    const currentAudioTime = audio.currentTime

    if (audio.paused || (audio.ended)) {
      setAnimation("Idle")
    }

    Object.values(corresponding).forEach((value) => {
      nodes.Wolf3D_Head.morphTargetInfluences[
        nodes.Wolf3D_Head.morphTargetDictionary[value]
      ] = 0
      nodes.Wolf3D_Teeth.morphTargetInfluences[
        nodes.Wolf3D_Teeth.morphTargetDictionary[value]
      ] = 0
    })

    for (let i = 0; i < lipSync.mouthCues.length; i++) {
      const mouthCue = lipSync.mouthCues[i]
      if (
        currentAudioTime >= mouthCue.start &&
        currentAudioTime <= mouthCue.end
      ) {
        console.log(mouthCue.value);
        nodes.Wolf3D_Head.morphTargetInfluences[
          nodes.Wolf3D_Head.morphTargetDictionary[corresponding[mouthCue.value]]
        ] = 1
        nodes.Wolf3D_Teeth.morphTargetInfluences[
          nodes.Wolf3D_Teeth.morphTargetDictionary[corresponding[mouthCue.value]]
        ] = 1
        break
      }
    }
  })

  // set animation
  useEffect(() => {
    actions[animation].reset().fadeIn(0.5).play()
    return () => actions[animation].fadeOut(0.5)
  }, [animation])

  return (
    <group {...props} dispose={null} ref={group}>
      <primitive object={nodes.Hips} />
      <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Glasses.geometry} material={materials.Wolf3D_Glasses} skeleton={nodes.Wolf3D_Glasses.skeleton} />
      <skinnedMesh name="EyeLeft" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />
      <skinnedMesh name="EyeRight" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />
      <skinnedMesh name="Wolf3D_Head" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />
      <skinnedMesh name="Wolf3D_Teeth" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />
    </group>
  )
}

useGLTF.preload('/models/avatar.glb')
